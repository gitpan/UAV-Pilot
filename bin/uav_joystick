#!/usr/bin/perl
use v5.14;
use warnings;
use AnyEvent;
use UAV::Pilot;
use UAV::Pilot::Commands;
use UAV::Pilot::ARDrone::Driver;
use UAV::Pilot::ARDrone::NavPacket;
use UAV::Pilot::ARDrone::Control::Event;
use UAV::Pilot::Events;
use UAV::Pilot::SDL::Events;
use UAV::Pilot::SDL::Joystick;
use Getopt::Long ();

use constant NAV_UPDATE_INTERVAL => 1 / 30;


my $IP       = '192.168.1.1';
my $SHOW_NAV = 0;
my $CONF     = undef;
Getopt::Long::GetOptions(
    'host=s'   => \$IP,
    'show-nav' => \$SHOW_NAV,
    'conf=s'   => \$CONF,
);


sub show_nav
{
    my ($driver, $cv, $events, $nav_feeder) = @_;
    eval "use UAV::Pilot::ARDrone::SDLNavOutput";
    die $@ if $@;

    my $sdl_nav = UAV::Pilot::ARDrone::SDLNavOutput->new({
        condvar => $cv,
        driver  => $driver,
        feeder  => $nav_feeder,
    });
    $events->register( $sdl_nav );

    return 1;
}


{
    my $ardrone = UAV::Pilot::ARDrone::Driver->new({
        host => $IP,
    });
    $ardrone->connect;

    my $dev = UAV::Pilot::ARDrone::Control::Event->new({
        driver => $ardrone,
    });

    my $cv = $dev->init_event_loop;
    my $events = UAV::Pilot::Events->new({
        condvar => $cv,
    });

    my $sdl_events = UAV::Pilot::SDL::Events->new;
    $events->register( $sdl_events );

    my $joystick = UAV::Pilot::SDL::Joystick->new({
        condvar    => $cv,
        controller => $dev,
        conf_path  => $CONF,
    });
    $events->register( $joystick );

    show_nav( $ardrone, $cv, $events, $dev ) if $SHOW_NAV;
    $events->init_event_loop;
    say "Ready to fly";
    $cv->recv;
    $joystick->close;
}


=head1 SYNOPSIS

    uav_joystick --show-nav

=head1 DESCRIPTION

Controls a Parrot AR.Drone with an SDL-compatible joystick.

C<--show-nav> displays the navigation output in an SDL window.  Closing the window will end 
the program.

The joystick parameters can be configured in a config file.  See C<UAV::Pilot::SDL::Joystick>
for details.

=cut
