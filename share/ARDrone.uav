use UAV::Pilot::Exceptions;
use UAV::Pilot::Control::ARDrone::Video::FileDump;
use UAV::Pilot::Driver::ARDrone::Video;


{
    my @NO_ARG_STRAIGHT_COMMANDS = qw(
        takeoff
        land
        calibrate
        phi_m30
        phi_30
        theta_m30
        theta_30
        theta_20deg_yaw_200
        theta_20deg_yaw_m200
        turnaround
        turnaround_godown
        yaw_shake
        yaw_dance
        phi_dance
        theta_dance
        vz_dance
        wave
        phi_theta_mixed
        double_phi_theta_mixed
        flip_ahead
        flip_behind
        flip_left
        flip_right
        emergency
        hover
        start_userbox_nav_data
        stop_userbox_nav_data
        cancel_userbox_nav_data
    );
    foreach my $name (@NO_ARG_STRAIGHT_COMMANDS) {
        no strict 'refs';
        *$name = sub () {
            $dev->$name;
        };
    }
}

{
    my @SINGLE_ARG_STRAIGHT_COMMANDS = qw(
        pitch
        roll
        yaw
        vert_speed
    );
    foreach my $name (@SINGLE_ARG_STRAIGHT_COMMANDS) {
        no strict 'refs';
        *$name = sub ($) {
            $dev->$name( @_ );
        };
    }
}

{
    my @TWO_ARG_STRAIGHT_COMMANDS = qw(
        led_blink_green_red
        led_blink_green
        led_blink_red
        led_blink_orange
        led_snake_green_red
        led_fire
        led_standard
        led_red
        led_green
        led_red_snake
        led_blank
        led_right_missile
        led_left_missile
        led_double_missile
        led_front_left_green_others_red
        led_front_right_green_others_red
        led_rear_right_green_others_red
        led_rear_left_green_others_red
        led_left_green_right_red
        led_left_red_right_green
        led_blink_standard
    );
    foreach my $name (@TWO_ARG_STRAIGHT_COMMANDS) {
        no strict 'refs';
        *$name = sub ($$) {
            $dev->$name( @_ );
        };
    }
}

sub take_picture ($$;$)
{
    $dev->take_picture( @_ );
}

{
    my $cv         = undef;
    my $sdl_events = undef;
    my $init_sdl_events = sub {
        return 1 if defined $sdl_events;
        die "Can't init UAV::Pilot::SDL::Events without a condvar\n" unless defined $cv;
        eval "use UAV::Pilot::SDL::Events";
        die "Problem loading UAV::Pilot::SDL::Events: $@\n" if $@;

        $sdl_events = UAV::Pilot::SDL::Events->new({
            condvar => $cv,
        });
        $sdl_events->init_event_loop;

        return 1;
    };


    sub uav_module_init
    {
        my ($class, $args) = @_;
        $cv = $$args{condvar};
        return 1;
    }


    sub start_joystick ()
    {
        $init_sdl_events->();
        eval "use UAV::Pilot::SDL::Joystick";
        die "Problem loading UAV::Pilot::SDL::Joystick: $@\n" if $@;

        my $joystick = UAV::Pilot::SDL::Joystick->new({
            condvar    => $cv,
            controller => $dev,
        });
        $sdl_events->register( $joystick );

        say 'Ready for joystick input on ['
            . SDL::Joystick::name( $joystick->joystick->index )
            . ']';

        return 1;
    }

    sub start_nav ()
    {
        $init_sdl_events->();
        eval "use UAV::Pilot::Control::ARDrone::SDLNavOutput";
        die "Problem loading UAV::Pilot::Control::ARDrone::SDLNavOutput: $@\n" if $@;

        my $nav = UAV::Pilot::Control::ARDrone::SDLNavOutput->new({
            driver => $dev->sender,
            feeder => $dev,
        });
        $sdl_events->register( $nav );

        say "Outputting navigation data";

        return 1;
    }

    sub dump_video_to_file ($)
    {
        my ($file) = @_;

        open( my $fh, '>', $file ) or UAV::Pilot::IOException->throw({
            error => "Can't open [$file] for reading: $!\n",
        });
        my $vid_dump = UAV::Pilot::Control::ARDrone::Video::FileDump->new({
            fh => $fh,
        });

        my $vid_driver = UAV::Pilot::Driver::ARDrone::Video->new({
            handler => $vid_dump,
            condvar => $cv,
            driver  => $dev->sender,
        });
        $vid_driver->init_event_loop;

        return 1;
    }
}


1;
